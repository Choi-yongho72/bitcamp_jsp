package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import db.DBClose;
import db.DBConnection;
import dto.BbsDto;

public class BbsDao {
	private static BbsDao dao = new BbsDao();
	
	private BbsDao() {
	}
	
	public static BbsDao getInstance() {
		return dao;
	}
	
	public boolean writeBbs(BbsDto bbs) {
		
		String sql = " INSERT INTO BBS "
				+ " (SEQ, ID, "
				+ " REF, STEP, DEPTH, "		// <- 댓글용	1,2,3
				+ " TITLE, CONTENT, WDATE, "
				+ " DEL, READCOUNT) "
				+ " VALUES(SEQ_BBS.NEXTVAL, ?, "
				+ " 	(SELECT NVL(MAX(REF), 0) + 1 FROM BBS), "	// REF = NULL -> 1, REF = 1 -> 2, REF = 2 -> 3
				+ "     0, 0, "
				+ " 	?, ?, SYSDATE, "
				+ "		0, 0) ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		int count = 0;
		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/6 writeBbs success");
				
			psmt = conn.prepareStatement(sql);
			System.out.println("2/6 writeBbs success");
			
			psmt.setString(1, bbs.getId());
			psmt.setString(2, bbs.getTitle());
			psmt.setString(3, bbs.getContent());
			
			count = psmt.executeUpdate();
			System.out.println("3/6 writeBbs success");
			
		} catch (SQLException e) {
			System.out.println("writeBbs fail");
			e.printStackTrace();
		} finally {
			DBClose.close(psmt, conn, null);			
		}		
		
		return count>0?true:false;
	}
	
	public List<BbsDto> getBbsList() {
		
		String sql = " SELECT SEQ, ID, REF, STEP, DEPTH, "
					+ " TITLE, CONTENT, WDATE, "
					+ " DEL, READCOUNT "
					+ " FROM BBS "
					+ " ORDER BY REF DESC, STEP ASC ";
					
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		List<BbsDto> list = new ArrayList<BbsDto>();
		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/6 getBbsList success");
			
			psmt = conn.prepareStatement(sql);
			System.out.println("2/6 getBbsList success");
			
			rs = psmt.executeQuery();
			System.out.println("3/6 getBbsList success");
			
			while(rs.next()) {
				int i = 1;
				BbsDto dto = new BbsDto(rs.getInt(i++), 
										rs.getString(i++), 
										rs.getInt(i++), 
										rs.getInt(i++), 
										rs.getInt(i++), 
										rs.getString(i++), 
										rs.getString(i++), 
										rs.getString(i++), 
										rs.getInt(i++), 
										rs.getInt(i++));
				list.add(dto);
			}
			System.out.println("4/6 getBbsList success");
			
		} catch (SQLException e) {
			System.out.println("getBbsList fail");
			e.printStackTrace();
		} finally {
			DBClose.close(psmt, conn, rs);			
		}
		
		return list;
	}
	
	public BbsDto getBbs(int seq) {
		String sql = " SELECT SEQ, ID, REF, STEP, DEPTH, "
					+ " TITLE, CONTENT, WDATE, "
					+ " DEL, READCOUNT "
					+ " FROM BBS "
					+ " WHERE SEQ=? ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		BbsDto dto = null;
		
		
		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/6 getBbs Success");
			
			psmt = conn.prepareStatement(sql);
			System.out.println("2/6 getBbs Success");
			
			psmt.setInt(1, seq);
			
			rs = psmt.executeQuery();
			System.out.println("3/6 getBbs Success");
			
			if(rs.next()) {
				int i = 1;
				dto = new BbsDto(rs.getInt(i++), 
								rs.getString(i++), 
								rs.getInt(i++), 
								rs.getInt(i++), 
								rs.getInt(i++), 
								rs.getString(i++), 
								rs.getString(i++), 
								rs.getString(i++), 
								rs.getInt(i++), 
								rs.getInt(i++));
			}
			System.out.println("4/6 getBbs Success");
			
		} catch (SQLException e) {
			System.out.println("getBbs Fail");
			e.printStackTrace();
		} finally {
			DBClose.close(psmt, conn, rs);
		}
		
		return dto;
	}
	
	public void readcount(int seq) {
		String sql = " UPDATE BBS "
					+ " SET READCOUNT=READCOUNT+1 "
					+ " WHERE SEQ=? ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/6 readcount Success");
			
			psmt = conn.prepareStatement(sql);
			psmt.setInt(1, seq);
			System.out.println("2/6 readcount Success");
			
			psmt.executeUpdate();
			System.out.println("3/6 readcount Success");
			
		} catch (SQLException e) {
			System.out.println("readcount Fail");
			e.printStackTrace();
		} finally {
			DBClose.close(psmt, conn, null);
		}
	}
	
	//					    부모글의 sequence, 답글의 object
	public boolean answer(int seq, BbsDto bbs) {
		// update
		String sql1 = " UPDATE BBS "
					+ " SET STEP=STEP+1 "
					+ " WHERE REF=(SELECT REF FROM BBS WHERE SEQ=?) "
					+ " 	AND STEP > (SELECT STEP FROM BBS WHERE SEQ=?) ";
		
		// insert
		String sql2 = " INSERT INTO BBS "
					+ " (SEQ, ID, REF, STEP, DEPTH, "
					+ " TITLE, CONTENT, WDATE, DEL, READCOUNT) "
					+ " VALUES(SEQ_BBS.NEXTVAL, ?, "
					+ " 	(SELECT REF FROM BBS WHERE SEQ=?), "
					+ " 	(SELECT STEP FROM BBS WHERE SEQ=?) + 1,"
					+ "		(SELECT DEPTH FROM BBS WHERE SEQ=?) + 1, "
					+ "		?, ?, SYSDATE, 0, 0) ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		
		int count = 0;
		
		try {
			conn = DBConnection.getConnection();
			conn.setAutoCommit(false);
			System.out.println("1/6 answer Success");
			
			// update
			psmt = conn.prepareStatement(sql1);
			psmt.setInt(1, seq);
			psmt.setInt(2, seq);
			System.out.println("2/6 answer Success");
			
			count = psmt.executeUpdate();
			System.out.println("3/6 answer Success");
			
			// psmt 초기화
			psmt.clearParameters();
			
			// insert
			psmt = conn.prepareStatement(sql2);
			psmt.setString(1, bbs.getId());
			psmt.setInt(2, seq);	// ref
			psmt.setInt(3, seq);	// step
			psmt.setInt(4, seq);	// depth
			psmt.setString(5, bbs.getTitle());
			psmt.setString(6, bbs.getContent());
			System.out.println("4/6 answer Success");
			
			count = psmt.executeUpdate();
			System.out.println("5/6 answer Success");
			conn.commit();
			
		} catch (SQLException e) {
			System.out.println("answer Fail");
			
			try {
				conn.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			e.printStackTrace();
		} finally {
			try {
				conn.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			DBClose.close(psmt, conn, null);
			System.out.println("6/6 answer Success");
		}
		
		return count > 0 ? true : false;
	}
	
	public boolean deleteBbS(int seq) {
		String sql = " UPDATE BBS "
				+ " SET DEL = 1 "
				+ " WHERE SEQ = ? ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		int count = 0;
		
		try {
			
			conn = DBConnection.getConnection(); // connection 안에 rollback있음
			System.out.println("1/6 deleteBbs success");
			psmt = conn.prepareStatement(sql);
			System.out.println("2/6 deleteBbs success");
			psmt.setInt(1, seq);
			System.out.println("3/6 deleteBbs success");
			count = psmt.executeUpdate();
			System.out.println("4/6 deleteBbs success");
			
			
		} catch (SQLException e) {
			System.out.println("deleteBbs fail");
			e.printStackTrace();
		} finally{
			DBClose.close(psmt, conn, rs);
		}
		
		return count > 0 ? true:false;
	}
	
	public boolean updateBbs(int seq, String title, String content) {
		String sql = " UPDATE BBS "
				   + " SET TITLE = ?, CONTENT = ? " 
				   + " WHERE SEQ = ? ";

		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		int count = 0;

		try {
			conn = DBConnection.getConnection();
			System.out.println("1/6 updateBbs success");
			psmt = conn.prepareStatement(sql);
			System.out.println("2/6 updateBbs success");
			psmt.setString(1, title);
			psmt.setString(2, content);
			psmt.setInt(3, seq);
	
			count = psmt.executeUpdate();
			System.out.println("3/6 updateBbs success");
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("updateBbs fail");
		} finally {
			DBClose.close(psmt, conn, rs);
		}

		return count > 0 ? true : false;
	}
	
	public List<BbsDto> getFindList(String keyword, String _type) {
		
		String sql =  " SELECT ( SEQ, ID, REF, STEP, DEPTH, TITLE, CONTENT, WDATE, DEL, READCOUNT ) "
					+ " FROM BBS "
					+ " WHERE 1=1 ";
		
		if(_type.equals("제목")) {
			sql = sql + " AND TITLE LIKE ? ";  
		}else if(_type.equals("내용")){
			sql = sql + " AND CONTENT LIKE ? ";
		}else if(_type.equals("작성자")){
			sql = sql + " AND ID = ? ";
		}
		
		sql = sql + " ORDER BY WDATE DESC ";
		
		List<BbsDto> list = new ArrayList<BbsDto>();
		
		Connection conn=null;
		PreparedStatement psmt=null;
		ResultSet rs=null;
		
		try {
			conn = DBConnection.getConnection();	
			System.out.println("1/6 getFindList success");
			psmt = conn.prepareStatement(sql);
			System.out.println("2/6 getFindList success");
			
			if(_type.equals("작성자")) {
				psmt.setString(1, keyword);				
			}else if(_type.equals("제목") || _type.equals("내용")){
				psmt.setString(1, "%" + keyword + "%");
			}
			
			rs = psmt.executeQuery();
			System.out.println("3/6 getFindList success");
			
			while(rs.next()) {
				int i = 1;
				
				BbsDto dto = new BbsDto(rs.getInt(i++), 
										rs.getString(i++),  
										rs.getInt(i++), 
										rs.getInt(i++), 
										rs.getInt(i++), 
										rs.getString(i++),  
										rs.getString(i++),  
										rs.getString(i++),  
										rs.getInt(i++), 
										rs.getInt(i++));
				list.add(dto);				
			}		
			System.out.println("4/6 getFindList success");
			
		} catch (SQLException e) {			
			e.printStackTrace();
			System.out.println("getFindList fail");
		} finally {
			DBClose.close(psmt, conn, rs);			
		}
		return list;
	}
	
	public List<BbsDto> getBbsList(String choice, String searchWord) {
	      
	      String sql = " SELECT SEQ, ID, REF, STEP, DEPTH, "
	               + " TITLE, CONTENT, WDATE, "
	               + " DEL, READCOUNT "
	               + " FROM BBS ";   
	      
	      String sqlWord = "";
	      if(choice.equals("title")) {
	         sqlWord = " WHERE TITLE LIKE '%" + searchWord.trim() + "%' ";
	      }else if(choice.equals("writer")) {
	         sqlWord = " WHERE ID='" + searchWord.trim() + "'";
	      }else if(choice.equals("content")) {
	         sqlWord = " WHERE CONTENT LIKE '%" + searchWord.trim() + "%' ";
	      }
	      sql += sqlWord;
	      
	      sql += " ORDER BY REF DESC, STEP ASC ";
	      
	      Connection conn = null;
	      PreparedStatement psmt = null;
	      ResultSet rs = null;
	      
	      List<BbsDto> list = new ArrayList<BbsDto>();
	      
	      try {
	         conn = DBConnection.getConnection();
	         System.out.println("1/6 getBbsList success");
	         
	         psmt = conn.prepareStatement(sql);
	         System.out.println("2/6 getBbsList success");
	         
	         rs = psmt.executeQuery();
	         System.out.println("3/6 getBbsList success");
	         
	         while(rs.next()) {
	            int i = 1;
	            BbsDto dto = new BbsDto(rs.getInt(i++), 
	                              rs.getString(i++), 
	                              rs.getInt(i++), 
	                              rs.getInt(i++), 
	                              rs.getInt(i++), 
	                              rs.getString(i++), 
	                              rs.getString(i++), 
	                              rs.getString(i++), 
	                              rs.getInt(i++), 
	                              rs.getInt(i++));
	            list.add(dto);
	         }
	         System.out.println("4/6 getBbsList success");
	         
	      } catch (SQLException e) {
	         System.out.println("getBbsList fail");
	         e.printStackTrace();
	      } finally {
	         DBClose.close(psmt, conn, rs);         
	      }
	      
	      return list;
	      
	   }

}



































